// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LimitOrder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LimitOrder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LimitOrder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LimitOrder", id.toString(), this);
  }

  static load(id: string): LimitOrder | null {
    return store.get("LimitOrder", id) as LimitOrder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get updatesCount(): BigInt {
    let value = this.get("updatesCount");
    return value.toBigInt();
  }

  set updatesCount(value: BigInt) {
    this.set("updatesCount", Value.fromBigInt(value));
  }

  get makerAddress(): Bytes {
    let value = this.get("makerAddress");
    return value.toBytes();
  }

  set makerAddress(value: Bytes) {
    this.set("makerAddress", Value.fromBytes(value));
  }

  get takerAddress(): Bytes {
    let value = this.get("takerAddress");
    return value.toBytes();
  }

  set takerAddress(value: Bytes) {
    this.set("takerAddress", Value.fromBytes(value));
  }

  get makerAsset(): Bytes {
    let value = this.get("makerAsset");
    return value.toBytes();
  }

  set makerAsset(value: Bytes) {
    this.set("makerAsset", Value.fromBytes(value));
  }

  get takerAsset(): Bytes {
    let value = this.get("takerAsset");
    return value.toBytes();
  }

  set takerAsset(value: Bytes) {
    this.set("takerAsset", Value.fromBytes(value));
  }

  get makerAmount(): BigInt {
    let value = this.get("makerAmount");
    return value.toBigInt();
  }

  set makerAmount(value: BigInt) {
    this.set("makerAmount", Value.fromBigInt(value));
  }

  get takerAmount(): BigInt {
    let value = this.get("takerAmount");
    return value.toBigInt();
  }

  set takerAmount(value: BigInt) {
    this.set("takerAmount", Value.fromBigInt(value));
  }

  get expiration(): BigInt {
    let value = this.get("expiration");
    return value.toBigInt();
  }

  set expiration(value: BigInt) {
    this.set("expiration", Value.fromBigInt(value));
  }

  get remainingAmount(): BigInt {
    let value = this.get("remainingAmount");
    return value.toBigInt();
  }

  set remainingAmount(value: BigInt) {
    this.set("remainingAmount", Value.fromBigInt(value));
  }
}
