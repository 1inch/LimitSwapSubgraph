// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class LimitOrderUpdated extends EthereumEvent {
  get params(): LimitOrderUpdated__Params {
    return new LimitOrderUpdated__Params(this);
  }
}

export class LimitOrderUpdated__Params {
  _event: LimitOrderUpdated;

  constructor(event: LimitOrderUpdated) {
    this._event = event;
  }

  get makerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get takerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get makerAsset(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get takerAsset(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get makerAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get takerAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get remaining(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Contract extends SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  available(
    makerAddress: Address,
    takerAddress: Address,
    makerAsset: Address,
    takerAsset: Address,
    makerAmount: BigInt,
    takerAmount: BigInt,
    expiration: BigInt
  ): BigInt {
    let result = super.call("available", [
      EthereumValue.fromAddress(makerAddress),
      EthereumValue.fromAddress(takerAddress),
      EthereumValue.fromAddress(makerAsset),
      EthereumValue.fromAddress(takerAsset),
      EthereumValue.fromUnsignedBigInt(makerAmount),
      EthereumValue.fromUnsignedBigInt(takerAmount),
      EthereumValue.fromUnsignedBigInt(expiration)
    ]);

    return result[0].toBigInt();
  }

  try_available(
    makerAddress: Address,
    takerAddress: Address,
    makerAsset: Address,
    takerAsset: Address,
    makerAmount: BigInt,
    takerAmount: BigInt,
    expiration: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("available", [
      EthereumValue.fromAddress(makerAddress),
      EthereumValue.fromAddress(takerAddress),
      EthereumValue.fromAddress(makerAsset),
      EthereumValue.fromAddress(takerAsset),
      EthereumValue.fromUnsignedBigInt(makerAmount),
      EthereumValue.fromUnsignedBigInt(takerAmount),
      EthereumValue.fromUnsignedBigInt(expiration)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(user: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(user)]);

    return result[0].toBigInt();
  }

  try_balanceOf(user: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [EthereumValue.fromAddress(user)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  remainings(param0: Bytes): BigInt {
    let result = super.call("remainings", [
      EthereumValue.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_remainings(param0: Bytes): CallResult<BigInt> {
    let result = super.tryCall("remainings", [
      EthereumValue.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class CancelOrderCall extends EthereumCall {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get takerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get makerAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get takerAsset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get makerAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get takerAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class DepositCall extends EthereumCall {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class MakeOrderCall extends EthereumCall {
  get inputs(): MakeOrderCall__Inputs {
    return new MakeOrderCall__Inputs(this);
  }

  get outputs(): MakeOrderCall__Outputs {
    return new MakeOrderCall__Outputs(this);
  }
}

export class MakeOrderCall__Inputs {
  _call: MakeOrderCall;

  constructor(call: MakeOrderCall) {
    this._call = call;
  }

  get takerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get makerAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get takerAsset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get makerAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get takerAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class MakeOrderCall__Outputs {
  _call: MakeOrderCall;

  constructor(call: MakeOrderCall) {
    this._call = call;
  }
}

export class TakeOrderCall extends EthereumCall {
  get inputs(): TakeOrderCall__Inputs {
    return new TakeOrderCall__Inputs(this);
  }

  get outputs(): TakeOrderCall__Outputs {
    return new TakeOrderCall__Outputs(this);
  }
}

export class TakeOrderCall__Inputs {
  _call: TakeOrderCall;

  constructor(call: TakeOrderCall) {
    this._call = call;
  }

  get makerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get takerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get makerAsset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get takerAsset(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get makerAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get takerAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get takingAmount(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get interactive(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }
}

export class TakeOrderCall__Outputs {
  _call: TakeOrderCall;

  constructor(call: TakeOrderCall) {
    this._call = call;
  }
}

export class TakeOrderAvailableCall extends EthereumCall {
  get inputs(): TakeOrderAvailableCall__Inputs {
    return new TakeOrderAvailableCall__Inputs(this);
  }

  get outputs(): TakeOrderAvailableCall__Outputs {
    return new TakeOrderAvailableCall__Outputs(this);
  }
}

export class TakeOrderAvailableCall__Inputs {
  _call: TakeOrderAvailableCall;

  constructor(call: TakeOrderAvailableCall) {
    this._call = call;
  }

  get makerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get takerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get makerAsset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get takerAsset(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get makerAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get takerAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get takingAmount(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get interactive(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }
}

export class TakeOrderAvailableCall__Outputs {
  _call: TakeOrderAvailableCall;

  constructor(call: TakeOrderAvailableCall) {
    this._call = call;
  }
}

export class WithdrawCall extends EthereumCall {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
